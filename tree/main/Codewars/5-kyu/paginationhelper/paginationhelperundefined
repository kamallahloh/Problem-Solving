        }
    }
​
    /// <summary>
    /// The number of pages
    /// </summary>
    public int PageCount
    {
        get { 
            return (int)Math.Ceiling((double)_collection.Count / _itemsPerPage); 
        }
    }
​
    /// <summary>
    /// Returns the number of items in the page at the given page index 
    /// </summary>
    /// <param name="pageIndex">The zero-based page index to get the number of items for</param>
    /// <returns>The number of items on the specified page or -1 for pageIndex values that are out of range</returns>
    public int PageItemCount(int pageIndex)
    {
        if (pageIndex < 0 || pageIndex >= PageCount)
            return -1;
​
        if (pageIndex == PageCount - 1)
            return _collection.Count % _itemsPerPage == 0 ? _itemsPerPage : _collection.Count % _itemsPerPage;
​
        return _itemsPerPage;
    }
​
    /// <summary>
    /// Returns the page index of the page containing the item at the given item index.
    /// </summary>
    /// <param name="itemIndex">The zero-based index of the item to get the pageIndex for</param>
    /// <returns>The zero-based page index of the page containing the item at the given item index or -1 if the item index is out of range</returns>
    public int PageIndex(int itemIndex)
    {
        if (itemIndex < 0 || itemIndex >= _collection.Count)
            return -1;
​
        return itemIndex / _itemsPerPage;
    }
}